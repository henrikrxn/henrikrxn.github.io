<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Henrik Røn</title>
		<link>https://henrikrxn.github.io/</link>
		<description />
		<copyright>Copyright © 2023</copyright>
		<pubDate>Wed, 14 Jun 2023 20:38:27 GMT</pubDate>
		<lastBuildDate>Wed, 14 Jun 2023 20:38:27 GMT</lastBuildDate>
		<item>
			<title>WebAssembly (WASI) 'Hello World' on .NET 8 Preview 4</title>
			<link>https://henrikrxn.github.io/blog/Webassembly-dotnet-8-hello-world</link>
			<description>&lt;p&gt;A word of warning: I am a noob at WebAssembly (WASM) and WASI, so some of the
stuff in this post is probably superfluous, maybe even wrong. I could not yet
find much information online, so I have just been trying stuff.&lt;/p&gt;</description>
			<guid>https://henrikrxn.github.io/blog/Webassembly-dotnet-8-hello-world</guid>
			<pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;A word of warning: I am a noob at WebAssembly (WASM) and WASI, so some of the
stuff in this post is probably superfluous, maybe even wrong. I could not yet
find much information online, so I have just been trying stuff.&lt;/p&gt;
&lt;p&gt;I mostly wrote the post for my own sake as a log of what I did when I get
the time to pick this up again.&lt;/p&gt;
&lt;p&gt;You can find the source code for this post &lt;a href="https://github.com/henrikrxn/webassembly-experiments/tree/main/wasiconsole-hello-world"&gt;here&lt;/a&gt;.
The initial commit is the code as generated by &lt;code&gt;dotnet new&lt;/code&gt; and I since made
modifications to the README.md to correct the things I could not get to work.&lt;/p&gt;
&lt;h2 id="scenario-for-this-post-hello-world"&gt;Scenario for this post: Hello World&lt;/h2&gt;
&lt;p&gt;The scenario I want to try is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build a WASI compatible .wasm file using .NET 8 Preview 4.&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/BytecodeAlliance/wasmtime"&gt;Wasmtime CLI&lt;/a&gt; to run that file.
Amongst other things the Wasmtime CLI is a standalone WebAssembly runtime.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The .NET code only needs to do something identifiable, e.g. write to the console.&lt;/p&gt;
&lt;h2 id="what-i-found-about-wasi-support-in.net"&gt;What I found about WASI support in .NET&lt;/h2&gt;
&lt;p&gt;An &lt;a href="https://github.com/dotnet/runtime/issues/65895"&gt;issue&lt;/a&gt; in the Github repository
&lt;code&gt;dotnet/runtime&lt;/code&gt; tracking WASI support in the .NET runtime.&lt;/p&gt;
&lt;p&gt;There is another Github repository &lt;a href="https://github.com/dotnet/dotnet-wasi-sdk/"&gt;dotnet/dotnet-wasi-sdk&lt;/a&gt;,
but it looks like this has been abandoned because of the ongoing work in &lt;code&gt;dotnet/runtime&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Steve Sanderson also has an even older Github repository
&lt;a href="https://github.com/SteveSandersonMS/dotnet-wasi-sdk/"&gt;SteveSandersonMS/dotnet-wasi-sdk&lt;/a&gt;
that also looks abandoned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Found a &lt;a href="https://www.youtube.com/watch?v=gKX-cdqnb8I&amp;amp;ab_channel=stevensandersonuk"&gt;Youtube video&lt;/a&gt;
by Steve Sanderson where he does the same thing and explains how to get a single
wasm file. He also showcases a couple of mind-blowing usage examples. Go watch that!&lt;/p&gt;
&lt;h2 id="what-i-ended-up-having-installed"&gt;What I ended up having installed&lt;/h2&gt;
&lt;p&gt;My strategy for the 'Hello World' has been to install everything sounding
remotely relevant, because there is little information available and I did not
want to have to fight strange error messages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0"&gt;.NET 8 Preview 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual Studio Community 2022 Preview 17.7.0 Preview 1&lt;/li&gt;
&lt;li&gt;A number of .NET workloads for WebAssembly&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bytecodealliance/wasmtime/"&gt;Wasmtime CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See specifics on what I installed and how I did it at the end of the article.&lt;/p&gt;
&lt;h2 id="making-the-hello-world-program"&gt;Making the 'Hello World' program&lt;/h2&gt;
&lt;p&gt;I used a Powershell 7 prompt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PS&amp;gt; mkdir wasiconsole-hello-world&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PS&amp;gt; cd wasiconsole-hello-world&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PS&amp;gt; dotnet new wasiconsole&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PS&amp;gt; dotnet build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PS&amp;gt; dotnet run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or if you want to use the Wasmtime CLI directly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PS&amp;gt; cd .\bin\Debug\net8.0\wasi-wasm\AppBundle\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PS&amp;gt; wasmtime .\dotnet.wasm --dir . wasiconsole-hello-world&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The option &lt;code&gt;--dir .&lt;/code&gt; enables the Wasmtime CLI to read the files it needs.
My guess the need for this might go away in a later preview, but time will tell.&lt;/p&gt;
&lt;p&gt;This is a little different from what's written in the generated README.md, but even
after correcting the obvious mistake in the path I could not get the instructions
in the generated README.md to work, so I did this instead.&lt;/p&gt;
&lt;p&gt;Update: After seeing the video by Steve Sanderson (mentioned above) I tried to
make the build create a single WASM file using the property &lt;code&gt;WasmSingleFileBundle&lt;/code&gt;
in the &lt;code&gt;.csproj&lt;/code&gt; file. This failed with this error message:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\Program Files\dotnet\packs\Microsoft.NET.Runtime.WebAssembly.Wasi.Sdk\8.0.0-preview.4.23259.5\Sdk\WasiApp.Native.targets(54,5): error : Could not find wasi-sdk. Either set $(WASI_SDK_PATH), or use workloads to get the sdk. SDK is required for building native files.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I found &lt;a href="https://github.com/dotnet/runtime/issues/85971"&gt;this issue&lt;/a&gt; in the
&lt;code&gt;dotnet/runtime&lt;/code&gt; repository on Github.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Downloaded the latest &lt;a href="https://github.com/WebAssembly/wasi-sdk/releases"&gt;release&lt;/a&gt;
of WebAssembly WASI-SDK. I am on Windows so I used &lt;code&gt;wasi-sdk-20.0.m-mingw.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unpacked it. I used 7-Zip.&lt;/li&gt;
&lt;li&gt;Set environment variable &lt;code&gt;WASI_SDK_PATH&lt;/code&gt; to point to the root folder of the unpacked
content, in my case, &lt;code&gt;E:\WASI-SDK\wasi-sdk-20.0+m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PS&amp;gt; dotnet build&lt;/code&gt; -&amp;gt; Got a new &lt;code&gt;wasiconsole-hello-world.wasm&lt;/code&gt; in
the &lt;code&gt;AppBundle&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Simpler to run:
&lt;code&gt;PS&amp;gt; wasmtime .\wasiconsole-hello-world.wasm --dir .&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I made the &lt;code&gt;WasmSingleFileBundle&lt;/code&gt; conditional so that &lt;code&gt;dotnet build&lt;/code&gt; + &lt;code&gt;dotnet run&lt;/code&gt;
still work out of the box, but with no single file WASM.&lt;/p&gt;
&lt;p&gt;If you are using the code in my repository and want single file wasm then
you'll have to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get and &amp;quot;install&amp;quot; the WebAssembly WASI SDK&lt;/li&gt;
&lt;li&gt;Set the environment variable &lt;code&gt;WASI_SDK_PATH&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="summary-and-observations"&gt;Summary and observations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using the wasiconsole template I got a simple program.&lt;/li&gt;
&lt;li&gt;dotnet could build it into something that could run on the Wasmtime CLI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a couple of observations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is not one self-contained .wasm file out of the box.
Rather a &lt;code&gt;dotnet.wasm&lt;/code&gt; file and a bunch of dlls in a folder.
My guess is that dotnet.wasm is the same as used in Blazor WebAssembly.&lt;/li&gt;
&lt;li&gt;It was still surprisingly easy to get up and running, especially if you can
live without single file WASM.&lt;/li&gt;
&lt;li&gt;If you want single file there still is a minor issue.&lt;/li&gt;
&lt;li&gt;There is information to be found when you get stuck.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="going-forward"&gt;Going forward&lt;/h2&gt;
&lt;p&gt;I'll either update this post as I find out more or make follow-up posts.&lt;/p&gt;
&lt;p&gt;I'll also try to keep this post updated as more .NET 8 previews are released.&lt;/p&gt;
&lt;p&gt;My longer term goal is to play with WebAssembly interoperability between
different languages outside of the browser.&lt;/p&gt;
&lt;h2 id="details-installed-software"&gt;Details: Installed software&lt;/h2&gt;
&lt;p&gt;Again, mostly so I know what I did. Nothing fancy here.&lt;/p&gt;
&lt;h3 id="net-sdk"&gt;.NET SDK&lt;/h3&gt;
&lt;p&gt;I already had &lt;a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0"&gt;.NET 8 Preview 4&lt;/a&gt;
installed.&lt;/p&gt;
&lt;h3 id="visual-studio"&gt;Visual Studio&lt;/h3&gt;
&lt;p&gt;I already had Visual Studio Community 2022 Preview 17.7.0 Preview 1 with these
relevant &amp;quot;individual components&amp;quot; installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET 6.0 WebAssembly Build Tools&lt;/li&gt;
&lt;li&gt;.NET 7.0 WebAssembly Build Tools&lt;/li&gt;
&lt;li&gt;.NET WebAssembly Build Tools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I ended up using the dotnet CLI, but I have no idea if the Visual
Studio components contributed in any way.&lt;/p&gt;
&lt;h3 id="net-workloads"&gt;.NET workloads&lt;/h3&gt;
&lt;p&gt;I ended up having these .NET workloads installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wasi-experimental&lt;/li&gt;
&lt;li&gt;wasm-experimental&lt;/li&gt;
&lt;li&gt;wasm-tools-net7&lt;/li&gt;
&lt;li&gt;wasm-tools-net6 (came from Visual Studio)&lt;/li&gt;
&lt;li&gt;wasm-tools (came from Visual Studio)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had previously not used workloads and could not find much online except the
dotnet CLI reference, so these commands helped me:&lt;/p&gt;
&lt;p&gt;NB: The &lt;code&gt;dotnet workload&lt;/code&gt; commands are influenced by &lt;code&gt;global.json&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Remember to check that you are targeting .NET 8 with &lt;code&gt;dotnet --info&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet workload list&lt;/code&gt;
Lists the workloads you have installed for the SDK currently in scope.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet workload search&lt;/code&gt;
Finds all available workloads, but there are not that many yet, so that is OK.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet workload install &amp;lt;workload id&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="wasmtime-cli"&gt;Wasmtime CLI&lt;/h3&gt;
&lt;p&gt;Installed Wasmtime CLI &lt;a href="https://github.com/bytecodealliance/wasmtime/releases/tag/v9.0.2"&gt;9.0.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I used the MSI because 9.0.2 is not yet available thru &lt;code&gt;winget&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="minor-nuisance-with-wasmtime-cli-on-windows"&gt;Minor nuisance with Wasmtime CLI on Windows&lt;/h4&gt;
&lt;p&gt;When upgrading there are a couple of things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrading does not correctly uninstall older versions which still show up in
&amp;quot;Control Panel -&amp;gt; Programs and Features&amp;quot; and if you are using Winget it will
keep insisting that there is an upgrade available.&lt;/li&gt;
&lt;li&gt;If you after upgrading to latest uninstall any older versions thru &amp;quot;Control Panel&amp;quot;
then you need to either:
&lt;ul&gt;
&lt;li&gt;Add the wasmtime CLI to your path again&lt;/li&gt;
&lt;li&gt;Winget: Remove and re-install to get the path set-up properly&lt;/li&gt;
&lt;li&gt;In &amp;quot;Control Panel&amp;quot; choose &amp;quot;Repair&amp;quot; to fix the path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you do not want older versions lying around then the best way to ensure
that everything works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Uninstall the wasmtime CLI you currently have&lt;/li&gt;
&lt;li&gt;Install the new version you want&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Using SSH in TeamCity</title>
			<link>https://henrikrxn.github.io/blog/SSH-with-Teamcity</link>
			<description>&lt;p&gt;For a product I worked on we needed to extract data from a Software as a Service
(SaaS) SAP installation as part of our TeamCity build jobs in Azure, but we only
had access to the SAP system from within our own network because of the SaaS
provider's white list policy. Adding our Azure build agents to the white list
was not an option as build agents were created as needed and disposed after a
given period of inactivity.&lt;/p&gt;</description>
			<guid>https://henrikrxn.github.io/blog/SSH-with-Teamcity</guid>
			<pubDate>Tue, 03 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;For a product I worked on we needed to extract data from a Software as a Service
(SaaS) SAP installation as part of our TeamCity build jobs in Azure, but we only
had access to the SAP system from within our own network because of the SaaS
provider's white list policy. Adding our Azure build agents to the white list
was not an option as build agents were created as needed and disposed after a
given period of inactivity.&lt;/p&gt;
&lt;p&gt;That TeamCity agents were created as needed also limits the ability to configure
SSH for the user running the actual TeamCity build process as this configuration
would be wiped for each new agent because of &lt;code&gt;sysprep&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However we had the possibility of opening a SSH tunnel with local port forwarding
to a machine within our network and thus access the SAP installation.&lt;/p&gt;
&lt;p&gt;So for better or for worse that is what we decided to do. This post describes
the solution and the process of arriving at that solution plus identifying a
few shortcomings.&lt;/p&gt;
&lt;p&gt;What we did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a passphraseless SSH key for accessing the SSH tunnel.
&lt;code&gt;ssh-keygen -t rsa -b 2048&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Store the passphraseless SSH key in TeamCity using the
&lt;a href="https://confluence.jetbrains.com/display/TCD10/SSH+Keys+Management"&gt;built-in functionality for uploading an SSH key&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://confluence.jetbrains.com/display/TCD10/SSH+Agent"&gt;TeamCity's built-in SSH Agent&lt;/a&gt;
functionality for opening a tunnel to the machine on our local network.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However the main problem with this approach was that the TeamCity SSH Agent keeps
the tunnel open as long as the TeamCity agent is active. So a way to close the
tunnel again was needed.&lt;/p&gt;
&lt;p&gt;So we used the SSH config file to get access to the &lt;code&gt;ControlMaster&lt;/code&gt; feature.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-language-shell-session"&gt;Host &amp;lt;DNS entry&amp;gt;
BatchMode yes
ControlMaster auto
ControlPath ~/.ssh/ssh-%u-%i-%r&amp;#64;%h-%p
ExitOnForwardFailure yes
LocalForward &amp;lt;local port&amp;gt; &amp;lt;remote IP&amp;gt;:&amp;lt;remote port&amp;gt;
StrictHostKeyChecking no
User &amp;lt;Username for SSH tunnel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using the control master it is possible to open the connection at the
beginning of the build job:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-language-bash"&gt;ssh -F &amp;quot;./ssh/config&amp;quot; -fn -M -N -T &amp;lt;DNS entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and at the end of a build job simply shutdown the connection:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-language-bash"&gt;ssh -F &amp;quot;./ssh/config&amp;quot; -T -O &amp;quot;exit&amp;quot; -o &amp;quot;LogLevel=ERROR&amp;quot; &amp;lt;DNS entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the &lt;a href="https://man.openbsd.org/ssh"&gt;SSH Manpage&lt;/a&gt; for explanations of the
different switches used.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Git: Let working dir determine Git user</title>
			<link>https://henrikrxn.github.io/blog/Git-with-several-Github-accounts</link>
			<description>&lt;p&gt;This post describes how to configure Git so that &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; change
depending on the working directory.&lt;/p&gt;</description>
			<guid>https://henrikrxn.github.io/blog/Git-with-several-Github-accounts</guid>
			<pubDate>Sun, 20 Feb 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;This post describes how to configure Git so that &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; change
depending on the working directory.&lt;/p&gt;
&lt;p&gt;The latest Git at the time of writing was 2.13.0 on Windows. I expect some of
the issues will go away in future Git versions.&lt;/p&gt;
&lt;p&gt;I use Github at work and have decided to have two profiles to keep things
compartmentalized. One for work and one for my spare time.&lt;/p&gt;
&lt;p&gt;Using multiple SSH keys has been a known workaround for quite some time. It has
been described in many blogs and articles. I used this
&lt;a href="https://ricardianambivalence.com/2013/09/22/github-for-work-and-play-multiple-accounts/"&gt;blog post&lt;/a&gt;
and &lt;a href="https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574"&gt;this blog&lt;/a&gt;
for information about the initial set-up.&lt;/p&gt;
&lt;p&gt;But there is still the matter of the user name and e-mail associated with git.&lt;/p&gt;
&lt;p&gt;It has been a minor annoyance and I have accidentally used my private account to
push to my work repositories once or twice.&lt;/p&gt;
&lt;p&gt;However Git 2.13 contains a new feature,
&lt;a href="https://git-scm.com/docs/git-config#_includes"&gt;Conditinal Include&lt;/a&gt;,
which can help you have multiple user names and e-mails. There are however a
few caveats I encountered along the way.&lt;/p&gt;
&lt;p&gt;First a short sample of what worked for me. Start by adding conditional includes
to your .gitconfig.&lt;/p&gt;
&lt;?# Gist Id="2b72e323ffd6003749074d8206723d64" Username="henrikrxn" /?&gt;
&lt;p&gt;Then you can have a .work.gitconfig&lt;/p&gt;
&lt;?# Gist Id="cded8d9d4df8119ba8a2a958f4663bc5" Username="henrikrxn" /?&gt;
&lt;p&gt;and a .sparetime.gitconfig&lt;/p&gt;
&lt;?# Gist Id="aa17c56be689c4292ee2e9323e26264f" Username="henrikrxn" /?&gt;
&lt;p&gt;There are a couple of things to take note of when adding conditional includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If you also have &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; in your &lt;code&gt;.gitconfig&lt;/code&gt; file.&lt;/strong&gt;
If you decide to configure default values for these then remember to do so
&lt;em&gt;before&lt;/em&gt; the conditional includes. Otherwise your defaults will overwrite anything
from the conditional includes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The path to the included files is relative to your .gitconfig&lt;/strong&gt;. When I was
having problems getting it to work I tried ~ as shorthand for my home directory,
but could not get that to work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Also *nix style full paths do not work on Windows&lt;/strong&gt;. You must use paths
like, e.g. &lt;code&gt;D:/Work/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a last tip for easy debugging of which configurations are loaded and from
which file they were loaded:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --show-origin --list&lt;/code&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>